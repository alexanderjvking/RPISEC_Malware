Malware Analysis
Lab05 - Malware Behavior

Lab_05-1.malware
1) What does the malware drop to disk?
	Uses RC_DATA to drop to UNICODE 
	"C:\Program Files\Google\Update\GoogleUpdate.exe"

2) How does the malware achieve persistence? Why does this make a great
host signature?
	It replaces GoogleUpdate so everytime GoogleUpdate.exe is ran
	the malware is ran.

3) How does the malware ensure more than one instance of itself isn't running
on the system at any given time?
	It uses a mutex called WODUDE

4) Name 2 ways the malware tries to hide its presence from the user.
	replaces GoogleUpdate.exe a trusted file
	it also hides the terminal window.

5) Name 2 major WinAPI calls involved in enabling the key logging.	
	SetWindowsHookExW - Enables a callback function on keypresses
	SetWinEventHook - Enables a callback function on window focus change

6) What are the names of the constants passed to each of these WinAPI calls?
	WH_KEYBOARD_LL, EVENT_SYSTEM_FOREGROUND, 
	WINEVENT_SKIPOWNPROCESS|WINEVENT_OUTOFCONTEXT

7) What does the malware do with the collected data?
	It takes the key logged data and writes it to 
	C:\Program Files\Google\Update\<hostname>

Lab_05-2.malware
1) Why does this sample use the internet? Where does it connect to?
	it uses URLDownloadtofilew - Downloads bits from the Internet and saves them to a file
	to "C:\Program Files\Mozilla Maintenance Service\maintenanceservice.exe"
	from "http://malcode.rpis.ec/update_defender"

2) How does the malware achieve persistence? Why does this make a great
host signature?
	similar to the GoogleUpdate.exe they both run whenever maintenanceservice.exe
	would be ran.

3) Why is the second mutex necessary in this sample?
	The second mutex is needed to ensure that only one child window is running at
	a single time. The first enumeration grabs the mutex and every enumeration
	afterwards must wait until the mutex is done.

4) Briefly describe what SendMessage does.
	Sends the specified message to a window or windows. 
	The SendMessage function calls the window procedure for the 
	specified window and does not return until the window procedure has 
	processed the message.

5) What are the names and purposes of the 3 constants used by this sample?
	EM_GETPASSWORDCHAR - gets the password from a control message
	EM_SETPASSWORDCHAR - sets the password for a control message
	EM_GETLINE - 	gets line specified in control message

6) How does this sample steal passwords? How does it differ from the last sample?
	This sample looks for password boxes in the foreground window.
	When it finds one it removes the mask then gets it using GETLINE
	The last example used a keylogger

7) What does the malware do with the collected data?
	It puts all the data into C:\Program Files\Mozilla Maintenance Service\
	<localhost>



